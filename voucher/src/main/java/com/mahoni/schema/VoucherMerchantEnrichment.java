/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.mahoni.schema;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class VoucherMerchantEnrichment extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1032384141382382436L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"VoucherMerchantEnrichment\",\"namespace\":\"com.mahoni.schema\",\"fields\":[{\"name\":\"eventId\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"voucherId\",\"type\":\"string\"},{\"name\":\"userId\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"string\"},{\"name\":\"age\",\"type\":\"int\"},{\"name\":\"voucherName\",\"type\":\"string\"},{\"name\":\"voucherType\",\"type\":\"string\"},{\"name\":\"merchantName\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<VoucherMerchantEnrichment> ENCODER =
      new BinaryMessageEncoder<VoucherMerchantEnrichment>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<VoucherMerchantEnrichment> DECODER =
      new BinaryMessageDecoder<VoucherMerchantEnrichment>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<VoucherMerchantEnrichment> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<VoucherMerchantEnrichment> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<VoucherMerchantEnrichment> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<VoucherMerchantEnrichment>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this VoucherMerchantEnrichment to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a VoucherMerchantEnrichment from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a VoucherMerchantEnrichment instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static VoucherMerchantEnrichment fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private CharSequence eventId;
   private long timestamp;
   private CharSequence voucherId;
   private CharSequence userId;
   private CharSequence sex;
   private int age;
   private CharSequence voucherName;
   private CharSequence voucherType;
   private CharSequence merchantName;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public VoucherMerchantEnrichment() {}

  /**
   * All-args constructor.
   * @param eventId The new value for eventId
   * @param timestamp The new value for timestamp
   * @param voucherId The new value for voucherId
   * @param userId The new value for userId
   * @param sex The new value for sex
   * @param age The new value for age
   * @param voucherName The new value for voucherName
   * @param voucherType The new value for voucherType
   * @param merchantName The new value for merchantName
   */
  public VoucherMerchantEnrichment(CharSequence eventId, Long timestamp, CharSequence voucherId, CharSequence userId, CharSequence sex, Integer age, CharSequence voucherName, CharSequence voucherType, CharSequence merchantName) {
    this.eventId = eventId;
    this.timestamp = timestamp;
    this.voucherId = voucherId;
    this.userId = userId;
    this.sex = sex;
    this.age = age;
    this.voucherName = voucherName;
    this.voucherType = voucherType;
    this.merchantName = merchantName;
  }

  public SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return eventId;
    case 1: return timestamp;
    case 2: return voucherId;
    case 3: return userId;
    case 4: return sex;
    case 5: return age;
    case 6: return voucherName;
    case 7: return voucherType;
    case 8: return merchantName;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: eventId = (CharSequence)value$; break;
    case 1: timestamp = (Long)value$; break;
    case 2: voucherId = (CharSequence)value$; break;
    case 3: userId = (CharSequence)value$; break;
    case 4: sex = (CharSequence)value$; break;
    case 5: age = (Integer)value$; break;
    case 6: voucherName = (CharSequence)value$; break;
    case 7: voucherType = (CharSequence)value$; break;
    case 8: merchantName = (CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'eventId' field.
   * @return The value of the 'eventId' field.
   */
  public CharSequence getEventId() {
    return eventId;
  }


  /**
   * Sets the value of the 'eventId' field.
   * @param value the value to set.
   */
  public void setEventId(CharSequence value) {
    this.eventId = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public long getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'voucherId' field.
   * @return The value of the 'voucherId' field.
   */
  public CharSequence getVoucherId() {
    return voucherId;
  }


  /**
   * Sets the value of the 'voucherId' field.
   * @param value the value to set.
   */
  public void setVoucherId(CharSequence value) {
    this.voucherId = value;
  }

  /**
   * Gets the value of the 'userId' field.
   * @return The value of the 'userId' field.
   */
  public CharSequence getUserId() {
    return userId;
  }


  /**
   * Sets the value of the 'userId' field.
   * @param value the value to set.
   */
  public void setUserId(CharSequence value) {
    this.userId = value;
  }

  /**
   * Gets the value of the 'sex' field.
   * @return The value of the 'sex' field.
   */
  public CharSequence getSex() {
    return sex;
  }


  /**
   * Sets the value of the 'sex' field.
   * @param value the value to set.
   */
  public void setSex(CharSequence value) {
    this.sex = value;
  }

  /**
   * Gets the value of the 'age' field.
   * @return The value of the 'age' field.
   */
  public int getAge() {
    return age;
  }


  /**
   * Sets the value of the 'age' field.
   * @param value the value to set.
   */
  public void setAge(int value) {
    this.age = value;
  }

  /**
   * Gets the value of the 'voucherName' field.
   * @return The value of the 'voucherName' field.
   */
  public CharSequence getVoucherName() {
    return voucherName;
  }


  /**
   * Sets the value of the 'voucherName' field.
   * @param value the value to set.
   */
  public void setVoucherName(CharSequence value) {
    this.voucherName = value;
  }

  /**
   * Gets the value of the 'voucherType' field.
   * @return The value of the 'voucherType' field.
   */
  public CharSequence getVoucherType() {
    return voucherType;
  }


  /**
   * Sets the value of the 'voucherType' field.
   * @param value the value to set.
   */
  public void setVoucherType(CharSequence value) {
    this.voucherType = value;
  }

  /**
   * Gets the value of the 'merchantName' field.
   * @return The value of the 'merchantName' field.
   */
  public CharSequence getMerchantName() {
    return merchantName;
  }


  /**
   * Sets the value of the 'merchantName' field.
   * @param value the value to set.
   */
  public void setMerchantName(CharSequence value) {
    this.merchantName = value;
  }

  /**
   * Creates a new VoucherMerchantEnrichment RecordBuilder.
   * @return A new VoucherMerchantEnrichment RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new VoucherMerchantEnrichment RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new VoucherMerchantEnrichment RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * Creates a new VoucherMerchantEnrichment RecordBuilder by copying an existing VoucherMerchantEnrichment instance.
   * @param other The existing instance to copy.
   * @return A new VoucherMerchantEnrichment RecordBuilder
   */
  public static Builder newBuilder(VoucherMerchantEnrichment other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * RecordBuilder for VoucherMerchantEnrichment instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<VoucherMerchantEnrichment>
    implements org.apache.avro.data.RecordBuilder<VoucherMerchantEnrichment> {

    private CharSequence eventId;
    private long timestamp;
    private CharSequence voucherId;
    private CharSequence userId;
    private CharSequence sex;
    private int age;
    private CharSequence voucherName;
    private CharSequence voucherType;
    private CharSequence merchantName;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.eventId)) {
        this.eventId = data().deepCopy(fields()[0].schema(), other.eventId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.voucherId)) {
        this.voucherId = data().deepCopy(fields()[2].schema(), other.voucherId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.userId)) {
        this.userId = data().deepCopy(fields()[3].schema(), other.userId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.sex)) {
        this.sex = data().deepCopy(fields()[4].schema(), other.sex);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.age)) {
        this.age = data().deepCopy(fields()[5].schema(), other.age);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.voucherName)) {
        this.voucherName = data().deepCopy(fields()[6].schema(), other.voucherName);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.voucherType)) {
        this.voucherType = data().deepCopy(fields()[7].schema(), other.voucherType);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.merchantName)) {
        this.merchantName = data().deepCopy(fields()[8].schema(), other.merchantName);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
    }

    /**
     * Creates a Builder by copying an existing VoucherMerchantEnrichment instance
     * @param other The existing instance to copy.
     */
    private Builder(VoucherMerchantEnrichment other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.eventId)) {
        this.eventId = data().deepCopy(fields()[0].schema(), other.eventId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.voucherId)) {
        this.voucherId = data().deepCopy(fields()[2].schema(), other.voucherId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.userId)) {
        this.userId = data().deepCopy(fields()[3].schema(), other.userId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.sex)) {
        this.sex = data().deepCopy(fields()[4].schema(), other.sex);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.age)) {
        this.age = data().deepCopy(fields()[5].schema(), other.age);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.voucherName)) {
        this.voucherName = data().deepCopy(fields()[6].schema(), other.voucherName);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.voucherType)) {
        this.voucherType = data().deepCopy(fields()[7].schema(), other.voucherType);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.merchantName)) {
        this.merchantName = data().deepCopy(fields()[8].schema(), other.merchantName);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'eventId' field.
      * @return The value.
      */
    public CharSequence getEventId() {
      return eventId;
    }


    /**
      * Sets the value of the 'eventId' field.
      * @param value The value of 'eventId'.
      * @return This builder.
      */
    public Builder setEventId(CharSequence value) {
      validate(fields()[0], value);
      this.eventId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'eventId' field has been set.
      * @return True if the 'eventId' field has been set, false otherwise.
      */
    public boolean hasEventId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'eventId' field.
      * @return This builder.
      */
    public Builder clearEventId() {
      eventId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public long getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public Builder setTimestamp(long value) {
      validate(fields()[1], value);
      this.timestamp = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public Builder clearTimestamp() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'voucherId' field.
      * @return The value.
      */
    public CharSequence getVoucherId() {
      return voucherId;
    }


    /**
      * Sets the value of the 'voucherId' field.
      * @param value The value of 'voucherId'.
      * @return This builder.
      */
    public Builder setVoucherId(CharSequence value) {
      validate(fields()[2], value);
      this.voucherId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'voucherId' field has been set.
      * @return True if the 'voucherId' field has been set, false otherwise.
      */
    public boolean hasVoucherId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'voucherId' field.
      * @return This builder.
      */
    public Builder clearVoucherId() {
      voucherId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * @return The value.
      */
    public CharSequence getUserId() {
      return userId;
    }


    /**
      * Sets the value of the 'userId' field.
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public Builder setUserId(CharSequence value) {
      validate(fields()[3], value);
      this.userId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'userId' field.
      * @return This builder.
      */
    public Builder clearUserId() {
      userId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'sex' field.
      * @return The value.
      */
    public CharSequence getSex() {
      return sex;
    }


    /**
      * Sets the value of the 'sex' field.
      * @param value The value of 'sex'.
      * @return This builder.
      */
    public Builder setSex(CharSequence value) {
      validate(fields()[4], value);
      this.sex = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'sex' field has been set.
      * @return True if the 'sex' field has been set, false otherwise.
      */
    public boolean hasSex() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'sex' field.
      * @return This builder.
      */
    public Builder clearSex() {
      sex = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'age' field.
      * @return The value.
      */
    public int getAge() {
      return age;
    }


    /**
      * Sets the value of the 'age' field.
      * @param value The value of 'age'.
      * @return This builder.
      */
    public Builder setAge(int value) {
      validate(fields()[5], value);
      this.age = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'age' field has been set.
      * @return True if the 'age' field has been set, false otherwise.
      */
    public boolean hasAge() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'age' field.
      * @return This builder.
      */
    public Builder clearAge() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'voucherName' field.
      * @return The value.
      */
    public CharSequence getVoucherName() {
      return voucherName;
    }


    /**
      * Sets the value of the 'voucherName' field.
      * @param value The value of 'voucherName'.
      * @return This builder.
      */
    public Builder setVoucherName(CharSequence value) {
      validate(fields()[6], value);
      this.voucherName = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'voucherName' field has been set.
      * @return True if the 'voucherName' field has been set, false otherwise.
      */
    public boolean hasVoucherName() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'voucherName' field.
      * @return This builder.
      */
    public Builder clearVoucherName() {
      voucherName = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'voucherType' field.
      * @return The value.
      */
    public CharSequence getVoucherType() {
      return voucherType;
    }


    /**
      * Sets the value of the 'voucherType' field.
      * @param value The value of 'voucherType'.
      * @return This builder.
      */
    public Builder setVoucherType(CharSequence value) {
      validate(fields()[7], value);
      this.voucherType = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'voucherType' field has been set.
      * @return True if the 'voucherType' field has been set, false otherwise.
      */
    public boolean hasVoucherType() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'voucherType' field.
      * @return This builder.
      */
    public Builder clearVoucherType() {
      voucherType = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'merchantName' field.
      * @return The value.
      */
    public CharSequence getMerchantName() {
      return merchantName;
    }


    /**
      * Sets the value of the 'merchantName' field.
      * @param value The value of 'merchantName'.
      * @return This builder.
      */
    public Builder setMerchantName(CharSequence value) {
      validate(fields()[8], value);
      this.merchantName = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'merchantName' field has been set.
      * @return True if the 'merchantName' field has been set, false otherwise.
      */
    public boolean hasMerchantName() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'merchantName' field.
      * @return This builder.
      */
    public Builder clearMerchantName() {
      merchantName = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public VoucherMerchantEnrichment build() {
      try {
        VoucherMerchantEnrichment record = new VoucherMerchantEnrichment();
        record.eventId = fieldSetFlags()[0] ? this.eventId : (CharSequence) defaultValue(fields()[0]);
        record.timestamp = fieldSetFlags()[1] ? this.timestamp : (Long) defaultValue(fields()[1]);
        record.voucherId = fieldSetFlags()[2] ? this.voucherId : (CharSequence) defaultValue(fields()[2]);
        record.userId = fieldSetFlags()[3] ? this.userId : (CharSequence) defaultValue(fields()[3]);
        record.sex = fieldSetFlags()[4] ? this.sex : (CharSequence) defaultValue(fields()[4]);
        record.age = fieldSetFlags()[5] ? this.age : (Integer) defaultValue(fields()[5]);
        record.voucherName = fieldSetFlags()[6] ? this.voucherName : (CharSequence) defaultValue(fields()[6]);
        record.voucherType = fieldSetFlags()[7] ? this.voucherType : (CharSequence) defaultValue(fields()[7]);
        record.merchantName = fieldSetFlags()[8] ? this.merchantName : (CharSequence) defaultValue(fields()[8]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<VoucherMerchantEnrichment>
    WRITER$ = (org.apache.avro.io.DatumWriter<VoucherMerchantEnrichment>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<VoucherMerchantEnrichment>
    READER$ = (org.apache.avro.io.DatumReader<VoucherMerchantEnrichment>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.eventId);

    out.writeLong(this.timestamp);

    out.writeString(this.voucherId);

    out.writeString(this.userId);

    out.writeString(this.sex);

    out.writeInt(this.age);

    out.writeString(this.voucherName);

    out.writeString(this.voucherType);

    out.writeString(this.merchantName);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.eventId = in.readString(this.eventId instanceof Utf8 ? (Utf8)this.eventId : null);

      this.timestamp = in.readLong();

      this.voucherId = in.readString(this.voucherId instanceof Utf8 ? (Utf8)this.voucherId : null);

      this.userId = in.readString(this.userId instanceof Utf8 ? (Utf8)this.userId : null);

      this.sex = in.readString(this.sex instanceof Utf8 ? (Utf8)this.sex : null);

      this.age = in.readInt();

      this.voucherName = in.readString(this.voucherName instanceof Utf8 ? (Utf8)this.voucherName : null);

      this.voucherType = in.readString(this.voucherType instanceof Utf8 ? (Utf8)this.voucherType : null);

      this.merchantName = in.readString(this.merchantName instanceof Utf8 ? (Utf8)this.merchantName : null);

    } else {
      for (int i = 0; i < 9; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.eventId = in.readString(this.eventId instanceof Utf8 ? (Utf8)this.eventId : null);
          break;

        case 1:
          this.timestamp = in.readLong();
          break;

        case 2:
          this.voucherId = in.readString(this.voucherId instanceof Utf8 ? (Utf8)this.voucherId : null);
          break;

        case 3:
          this.userId = in.readString(this.userId instanceof Utf8 ? (Utf8)this.userId : null);
          break;

        case 4:
          this.sex = in.readString(this.sex instanceof Utf8 ? (Utf8)this.sex : null);
          break;

        case 5:
          this.age = in.readInt();
          break;

        case 6:
          this.voucherName = in.readString(this.voucherName instanceof Utf8 ? (Utf8)this.voucherName : null);
          break;

        case 7:
          this.voucherType = in.readString(this.voucherType instanceof Utf8 ? (Utf8)this.voucherType : null);
          break;

        case 8:
          this.merchantName = in.readString(this.merchantName instanceof Utf8 ? (Utf8)this.merchantName : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}











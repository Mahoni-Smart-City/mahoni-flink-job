/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.mahoni.flink.schema;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AirQualityRawSchema extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5030875543123237804L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AirQualityRawSchema\",\"namespace\":\"com.mahoni.flink.schema\",\"fields\":[{\"name\":\"eventId\",\"type\":\"string\"},{\"name\":\"sensorId\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"aqi\",\"type\":\"double\"},{\"name\":\"co\",\"type\":\"double\"},{\"name\":\"no\",\"type\":\"double\"},{\"name\":\"no2\",\"type\":\"double\"},{\"name\":\"o3\",\"type\":\"double\"},{\"name\":\"so2\",\"type\":\"double\"},{\"name\":\"pm25\",\"type\":\"double\"},{\"name\":\"pm10\",\"type\":\"double\"},{\"name\":\"pm1\",\"type\":\"double\"},{\"name\":\"nh3\",\"type\":\"double\"},{\"name\":\"pressure\",\"type\":\"double\"},{\"name\":\"humidity\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AirQualityRawSchema> ENCODER =
      new BinaryMessageEncoder<AirQualityRawSchema>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AirQualityRawSchema> DECODER =
      new BinaryMessageDecoder<AirQualityRawSchema>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AirQualityRawSchema> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AirQualityRawSchema> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AirQualityRawSchema> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AirQualityRawSchema>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AirQualityRawSchema to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AirQualityRawSchema from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AirQualityRawSchema instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AirQualityRawSchema fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private CharSequence eventId;
   private CharSequence sensorId;
   private long timestamp;
   private double aqi;
   private double co;
   private double no;
   private double no2;
   private double o3;
   private double so2;
   private double pm25;
   private double pm10;
   private double pm1;
   private double nh3;
   private double pressure;
   private double humidity;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AirQualityRawSchema() {}

  /**
   * All-args constructor.
   * @param eventId The new value for eventId
   * @param sensorId The new value for sensorId
   * @param timestamp The new value for timestamp
   * @param aqi The new value for aqi
   * @param co The new value for co
   * @param no The new value for no
   * @param no2 The new value for no2
   * @param o3 The new value for o3
   * @param so2 The new value for so2
   * @param pm25 The new value for pm25
   * @param pm10 The new value for pm10
   * @param pm1 The new value for pm1
   * @param nh3 The new value for nh3
   * @param pressure The new value for pressure
   * @param humidity The new value for humidity
   */
  public AirQualityRawSchema(CharSequence eventId, CharSequence sensorId, Long timestamp, Double aqi, Double co, Double no, Double no2, Double o3, Double so2, Double pm25, Double pm10, Double pm1, Double nh3, Double pressure, Double humidity) {
    this.eventId = eventId;
    this.sensorId = sensorId;
    this.timestamp = timestamp;
    this.aqi = aqi;
    this.co = co;
    this.no = no;
    this.no2 = no2;
    this.o3 = o3;
    this.so2 = so2;
    this.pm25 = pm25;
    this.pm10 = pm10;
    this.pm1 = pm1;
    this.nh3 = nh3;
    this.pressure = pressure;
    this.humidity = humidity;
  }

  public SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return eventId;
    case 1: return sensorId;
    case 2: return timestamp;
    case 3: return aqi;
    case 4: return co;
    case 5: return no;
    case 6: return no2;
    case 7: return o3;
    case 8: return so2;
    case 9: return pm25;
    case 10: return pm10;
    case 11: return pm1;
    case 12: return nh3;
    case 13: return pressure;
    case 14: return humidity;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: eventId = (CharSequence)value$; break;
    case 1: sensorId = (CharSequence)value$; break;
    case 2: timestamp = (Long)value$; break;
    case 3: aqi = (Double)value$; break;
    case 4: co = (Double)value$; break;
    case 5: no = (Double)value$; break;
    case 6: no2 = (Double)value$; break;
    case 7: o3 = (Double)value$; break;
    case 8: so2 = (Double)value$; break;
    case 9: pm25 = (Double)value$; break;
    case 10: pm10 = (Double)value$; break;
    case 11: pm1 = (Double)value$; break;
    case 12: nh3 = (Double)value$; break;
    case 13: pressure = (Double)value$; break;
    case 14: humidity = (Double)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'eventId' field.
   * @return The value of the 'eventId' field.
   */
  public CharSequence getEventId() {
    return eventId;
  }


  /**
   * Sets the value of the 'eventId' field.
   * @param value the value to set.
   */
  public void setEventId(CharSequence value) {
    this.eventId = value;
  }

  /**
   * Gets the value of the 'sensorId' field.
   * @return The value of the 'sensorId' field.
   */
  public CharSequence getSensorId() {
    return sensorId;
  }


  /**
   * Sets the value of the 'sensorId' field.
   * @param value the value to set.
   */
  public void setSensorId(CharSequence value) {
    this.sensorId = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public long getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'aqi' field.
   * @return The value of the 'aqi' field.
   */
  public double getAqi() {
    return aqi;
  }


  /**
   * Sets the value of the 'aqi' field.
   * @param value the value to set.
   */
  public void setAqi(double value) {
    this.aqi = value;
  }

  /**
   * Gets the value of the 'co' field.
   * @return The value of the 'co' field.
   */
  public double getCo() {
    return co;
  }


  /**
   * Sets the value of the 'co' field.
   * @param value the value to set.
   */
  public void setCo(double value) {
    this.co = value;
  }

  /**
   * Gets the value of the 'no' field.
   * @return The value of the 'no' field.
   */
  public double getNo() {
    return no;
  }


  /**
   * Sets the value of the 'no' field.
   * @param value the value to set.
   */
  public void setNo(double value) {
    this.no = value;
  }

  /**
   * Gets the value of the 'no2' field.
   * @return The value of the 'no2' field.
   */
  public double getNo2() {
    return no2;
  }


  /**
   * Sets the value of the 'no2' field.
   * @param value the value to set.
   */
  public void setNo2(double value) {
    this.no2 = value;
  }

  /**
   * Gets the value of the 'o3' field.
   * @return The value of the 'o3' field.
   */
  public double getO3() {
    return o3;
  }


  /**
   * Sets the value of the 'o3' field.
   * @param value the value to set.
   */
  public void setO3(double value) {
    this.o3 = value;
  }

  /**
   * Gets the value of the 'so2' field.
   * @return The value of the 'so2' field.
   */
  public double getSo2() {
    return so2;
  }


  /**
   * Sets the value of the 'so2' field.
   * @param value the value to set.
   */
  public void setSo2(double value) {
    this.so2 = value;
  }

  /**
   * Gets the value of the 'pm25' field.
   * @return The value of the 'pm25' field.
   */
  public double getPm25() {
    return pm25;
  }


  /**
   * Sets the value of the 'pm25' field.
   * @param value the value to set.
   */
  public void setPm25(double value) {
    this.pm25 = value;
  }

  /**
   * Gets the value of the 'pm10' field.
   * @return The value of the 'pm10' field.
   */
  public double getPm10() {
    return pm10;
  }


  /**
   * Sets the value of the 'pm10' field.
   * @param value the value to set.
   */
  public void setPm10(double value) {
    this.pm10 = value;
  }

  /**
   * Gets the value of the 'pm1' field.
   * @return The value of the 'pm1' field.
   */
  public double getPm1() {
    return pm1;
  }


  /**
   * Sets the value of the 'pm1' field.
   * @param value the value to set.
   */
  public void setPm1(double value) {
    this.pm1 = value;
  }

  /**
   * Gets the value of the 'nh3' field.
   * @return The value of the 'nh3' field.
   */
  public double getNh3() {
    return nh3;
  }


  /**
   * Sets the value of the 'nh3' field.
   * @param value the value to set.
   */
  public void setNh3(double value) {
    this.nh3 = value;
  }

  /**
   * Gets the value of the 'pressure' field.
   * @return The value of the 'pressure' field.
   */
  public double getPressure() {
    return pressure;
  }


  /**
   * Sets the value of the 'pressure' field.
   * @param value the value to set.
   */
  public void setPressure(double value) {
    this.pressure = value;
  }

  /**
   * Gets the value of the 'humidity' field.
   * @return The value of the 'humidity' field.
   */
  public double getHumidity() {
    return humidity;
  }


  /**
   * Sets the value of the 'humidity' field.
   * @param value the value to set.
   */
  public void setHumidity(double value) {
    this.humidity = value;
  }

  /**
   * Creates a new AirQualityRawSchema RecordBuilder.
   * @return A new AirQualityRawSchema RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new AirQualityRawSchema RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AirQualityRawSchema RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * Creates a new AirQualityRawSchema RecordBuilder by copying an existing AirQualityRawSchema instance.
   * @param other The existing instance to copy.
   * @return A new AirQualityRawSchema RecordBuilder
   */
  public static Builder newBuilder(AirQualityRawSchema other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * RecordBuilder for AirQualityRawSchema instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AirQualityRawSchema>
    implements org.apache.avro.data.RecordBuilder<AirQualityRawSchema> {

    private CharSequence eventId;
    private CharSequence sensorId;
    private long timestamp;
    private double aqi;
    private double co;
    private double no;
    private double no2;
    private double o3;
    private double so2;
    private double pm25;
    private double pm10;
    private double pm1;
    private double nh3;
    private double pressure;
    private double humidity;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.eventId)) {
        this.eventId = data().deepCopy(fields()[0].schema(), other.eventId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.sensorId)) {
        this.sensorId = data().deepCopy(fields()[1].schema(), other.sensorId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.aqi)) {
        this.aqi = data().deepCopy(fields()[3].schema(), other.aqi);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.co)) {
        this.co = data().deepCopy(fields()[4].schema(), other.co);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.no)) {
        this.no = data().deepCopy(fields()[5].schema(), other.no);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.no2)) {
        this.no2 = data().deepCopy(fields()[6].schema(), other.no2);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.o3)) {
        this.o3 = data().deepCopy(fields()[7].schema(), other.o3);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.so2)) {
        this.so2 = data().deepCopy(fields()[8].schema(), other.so2);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.pm25)) {
        this.pm25 = data().deepCopy(fields()[9].schema(), other.pm25);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.pm10)) {
        this.pm10 = data().deepCopy(fields()[10].schema(), other.pm10);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.pm1)) {
        this.pm1 = data().deepCopy(fields()[11].schema(), other.pm1);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.nh3)) {
        this.nh3 = data().deepCopy(fields()[12].schema(), other.nh3);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.pressure)) {
        this.pressure = data().deepCopy(fields()[13].schema(), other.pressure);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.humidity)) {
        this.humidity = data().deepCopy(fields()[14].schema(), other.humidity);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
    }

    /**
     * Creates a Builder by copying an existing AirQualityRawSchema instance
     * @param other The existing instance to copy.
     */
    private Builder(AirQualityRawSchema other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.eventId)) {
        this.eventId = data().deepCopy(fields()[0].schema(), other.eventId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sensorId)) {
        this.sensorId = data().deepCopy(fields()[1].schema(), other.sensorId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.aqi)) {
        this.aqi = data().deepCopy(fields()[3].schema(), other.aqi);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.co)) {
        this.co = data().deepCopy(fields()[4].schema(), other.co);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.no)) {
        this.no = data().deepCopy(fields()[5].schema(), other.no);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.no2)) {
        this.no2 = data().deepCopy(fields()[6].schema(), other.no2);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.o3)) {
        this.o3 = data().deepCopy(fields()[7].schema(), other.o3);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.so2)) {
        this.so2 = data().deepCopy(fields()[8].schema(), other.so2);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.pm25)) {
        this.pm25 = data().deepCopy(fields()[9].schema(), other.pm25);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.pm10)) {
        this.pm10 = data().deepCopy(fields()[10].schema(), other.pm10);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.pm1)) {
        this.pm1 = data().deepCopy(fields()[11].schema(), other.pm1);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.nh3)) {
        this.nh3 = data().deepCopy(fields()[12].schema(), other.nh3);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.pressure)) {
        this.pressure = data().deepCopy(fields()[13].schema(), other.pressure);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.humidity)) {
        this.humidity = data().deepCopy(fields()[14].schema(), other.humidity);
        fieldSetFlags()[14] = true;
      }
    }

    /**
      * Gets the value of the 'eventId' field.
      * @return The value.
      */
    public CharSequence getEventId() {
      return eventId;
    }


    /**
      * Sets the value of the 'eventId' field.
      * @param value The value of 'eventId'.
      * @return This builder.
      */
    public Builder setEventId(CharSequence value) {
      validate(fields()[0], value);
      this.eventId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'eventId' field has been set.
      * @return True if the 'eventId' field has been set, false otherwise.
      */
    public boolean hasEventId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'eventId' field.
      * @return This builder.
      */
    public Builder clearEventId() {
      eventId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'sensorId' field.
      * @return The value.
      */
    public CharSequence getSensorId() {
      return sensorId;
    }


    /**
      * Sets the value of the 'sensorId' field.
      * @param value The value of 'sensorId'.
      * @return This builder.
      */
    public Builder setSensorId(CharSequence value) {
      validate(fields()[1], value);
      this.sensorId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'sensorId' field has been set.
      * @return True if the 'sensorId' field has been set, false otherwise.
      */
    public boolean hasSensorId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'sensorId' field.
      * @return This builder.
      */
    public Builder clearSensorId() {
      sensorId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public long getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public Builder setTimestamp(long value) {
      validate(fields()[2], value);
      this.timestamp = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public Builder clearTimestamp() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'aqi' field.
      * @return The value.
      */
    public double getAqi() {
      return aqi;
    }


    /**
      * Sets the value of the 'aqi' field.
      * @param value The value of 'aqi'.
      * @return This builder.
      */
    public Builder setAqi(double value) {
      validate(fields()[3], value);
      this.aqi = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'aqi' field has been set.
      * @return True if the 'aqi' field has been set, false otherwise.
      */
    public boolean hasAqi() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'aqi' field.
      * @return This builder.
      */
    public Builder clearAqi() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'co' field.
      * @return The value.
      */
    public double getCo() {
      return co;
    }


    /**
      * Sets the value of the 'co' field.
      * @param value The value of 'co'.
      * @return This builder.
      */
    public Builder setCo(double value) {
      validate(fields()[4], value);
      this.co = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'co' field has been set.
      * @return True if the 'co' field has been set, false otherwise.
      */
    public boolean hasCo() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'co' field.
      * @return This builder.
      */
    public Builder clearCo() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'no' field.
      * @return The value.
      */
    public double getNo() {
      return no;
    }


    /**
      * Sets the value of the 'no' field.
      * @param value The value of 'no'.
      * @return This builder.
      */
    public Builder setNo(double value) {
      validate(fields()[5], value);
      this.no = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'no' field has been set.
      * @return True if the 'no' field has been set, false otherwise.
      */
    public boolean hasNo() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'no' field.
      * @return This builder.
      */
    public Builder clearNo() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'no2' field.
      * @return The value.
      */
    public double getNo2() {
      return no2;
    }


    /**
      * Sets the value of the 'no2' field.
      * @param value The value of 'no2'.
      * @return This builder.
      */
    public Builder setNo2(double value) {
      validate(fields()[6], value);
      this.no2 = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'no2' field has been set.
      * @return True if the 'no2' field has been set, false otherwise.
      */
    public boolean hasNo2() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'no2' field.
      * @return This builder.
      */
    public Builder clearNo2() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'o3' field.
      * @return The value.
      */
    public double getO3() {
      return o3;
    }


    /**
      * Sets the value of the 'o3' field.
      * @param value The value of 'o3'.
      * @return This builder.
      */
    public Builder setO3(double value) {
      validate(fields()[7], value);
      this.o3 = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'o3' field has been set.
      * @return True if the 'o3' field has been set, false otherwise.
      */
    public boolean hasO3() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'o3' field.
      * @return This builder.
      */
    public Builder clearO3() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'so2' field.
      * @return The value.
      */
    public double getSo2() {
      return so2;
    }


    /**
      * Sets the value of the 'so2' field.
      * @param value The value of 'so2'.
      * @return This builder.
      */
    public Builder setSo2(double value) {
      validate(fields()[8], value);
      this.so2 = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'so2' field has been set.
      * @return True if the 'so2' field has been set, false otherwise.
      */
    public boolean hasSo2() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'so2' field.
      * @return This builder.
      */
    public Builder clearSo2() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'pm25' field.
      * @return The value.
      */
    public double getPm25() {
      return pm25;
    }


    /**
      * Sets the value of the 'pm25' field.
      * @param value The value of 'pm25'.
      * @return This builder.
      */
    public Builder setPm25(double value) {
      validate(fields()[9], value);
      this.pm25 = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'pm25' field has been set.
      * @return True if the 'pm25' field has been set, false otherwise.
      */
    public boolean hasPm25() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'pm25' field.
      * @return This builder.
      */
    public Builder clearPm25() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'pm10' field.
      * @return The value.
      */
    public double getPm10() {
      return pm10;
    }


    /**
      * Sets the value of the 'pm10' field.
      * @param value The value of 'pm10'.
      * @return This builder.
      */
    public Builder setPm10(double value) {
      validate(fields()[10], value);
      this.pm10 = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'pm10' field has been set.
      * @return True if the 'pm10' field has been set, false otherwise.
      */
    public boolean hasPm10() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'pm10' field.
      * @return This builder.
      */
    public Builder clearPm10() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'pm1' field.
      * @return The value.
      */
    public double getPm1() {
      return pm1;
    }


    /**
      * Sets the value of the 'pm1' field.
      * @param value The value of 'pm1'.
      * @return This builder.
      */
    public Builder setPm1(double value) {
      validate(fields()[11], value);
      this.pm1 = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'pm1' field has been set.
      * @return True if the 'pm1' field has been set, false otherwise.
      */
    public boolean hasPm1() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'pm1' field.
      * @return This builder.
      */
    public Builder clearPm1() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'nh3' field.
      * @return The value.
      */
    public double getNh3() {
      return nh3;
    }


    /**
      * Sets the value of the 'nh3' field.
      * @param value The value of 'nh3'.
      * @return This builder.
      */
    public Builder setNh3(double value) {
      validate(fields()[12], value);
      this.nh3 = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'nh3' field has been set.
      * @return True if the 'nh3' field has been set, false otherwise.
      */
    public boolean hasNh3() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'nh3' field.
      * @return This builder.
      */
    public Builder clearNh3() {
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'pressure' field.
      * @return The value.
      */
    public double getPressure() {
      return pressure;
    }


    /**
      * Sets the value of the 'pressure' field.
      * @param value The value of 'pressure'.
      * @return This builder.
      */
    public Builder setPressure(double value) {
      validate(fields()[13], value);
      this.pressure = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'pressure' field has been set.
      * @return True if the 'pressure' field has been set, false otherwise.
      */
    public boolean hasPressure() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'pressure' field.
      * @return This builder.
      */
    public Builder clearPressure() {
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'humidity' field.
      * @return The value.
      */
    public double getHumidity() {
      return humidity;
    }


    /**
      * Sets the value of the 'humidity' field.
      * @param value The value of 'humidity'.
      * @return This builder.
      */
    public Builder setHumidity(double value) {
      validate(fields()[14], value);
      this.humidity = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'humidity' field has been set.
      * @return True if the 'humidity' field has been set, false otherwise.
      */
    public boolean hasHumidity() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'humidity' field.
      * @return This builder.
      */
    public Builder clearHumidity() {
      fieldSetFlags()[14] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AirQualityRawSchema build() {
      try {
        AirQualityRawSchema record = new AirQualityRawSchema();
        record.eventId = fieldSetFlags()[0] ? this.eventId : (CharSequence) defaultValue(fields()[0]);
        record.sensorId = fieldSetFlags()[1] ? this.sensorId : (CharSequence) defaultValue(fields()[1]);
        record.timestamp = fieldSetFlags()[2] ? this.timestamp : (Long) defaultValue(fields()[2]);
        record.aqi = fieldSetFlags()[3] ? this.aqi : (Double) defaultValue(fields()[3]);
        record.co = fieldSetFlags()[4] ? this.co : (Double) defaultValue(fields()[4]);
        record.no = fieldSetFlags()[5] ? this.no : (Double) defaultValue(fields()[5]);
        record.no2 = fieldSetFlags()[6] ? this.no2 : (Double) defaultValue(fields()[6]);
        record.o3 = fieldSetFlags()[7] ? this.o3 : (Double) defaultValue(fields()[7]);
        record.so2 = fieldSetFlags()[8] ? this.so2 : (Double) defaultValue(fields()[8]);
        record.pm25 = fieldSetFlags()[9] ? this.pm25 : (Double) defaultValue(fields()[9]);
        record.pm10 = fieldSetFlags()[10] ? this.pm10 : (Double) defaultValue(fields()[10]);
        record.pm1 = fieldSetFlags()[11] ? this.pm1 : (Double) defaultValue(fields()[11]);
        record.nh3 = fieldSetFlags()[12] ? this.nh3 : (Double) defaultValue(fields()[12]);
        record.pressure = fieldSetFlags()[13] ? this.pressure : (Double) defaultValue(fields()[13]);
        record.humidity = fieldSetFlags()[14] ? this.humidity : (Double) defaultValue(fields()[14]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AirQualityRawSchema>
    WRITER$ = (org.apache.avro.io.DatumWriter<AirQualityRawSchema>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AirQualityRawSchema>
    READER$ = (org.apache.avro.io.DatumReader<AirQualityRawSchema>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.eventId);

    out.writeString(this.sensorId);

    out.writeLong(this.timestamp);

    out.writeDouble(this.aqi);

    out.writeDouble(this.co);

    out.writeDouble(this.no);

    out.writeDouble(this.no2);

    out.writeDouble(this.o3);

    out.writeDouble(this.so2);

    out.writeDouble(this.pm25);

    out.writeDouble(this.pm10);

    out.writeDouble(this.pm1);

    out.writeDouble(this.nh3);

    out.writeDouble(this.pressure);

    out.writeDouble(this.humidity);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.eventId = in.readString(this.eventId instanceof Utf8 ? (Utf8)this.eventId : null);

      this.sensorId = in.readString(this.sensorId instanceof Utf8 ? (Utf8)this.sensorId : null);

      this.timestamp = in.readLong();

      this.aqi = in.readDouble();

      this.co = in.readDouble();

      this.no = in.readDouble();

      this.no2 = in.readDouble();

      this.o3 = in.readDouble();

      this.so2 = in.readDouble();

      this.pm25 = in.readDouble();

      this.pm10 = in.readDouble();

      this.pm1 = in.readDouble();

      this.nh3 = in.readDouble();

      this.pressure = in.readDouble();

      this.humidity = in.readDouble();

    } else {
      for (int i = 0; i < 15; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.eventId = in.readString(this.eventId instanceof Utf8 ? (Utf8)this.eventId : null);
          break;

        case 1:
          this.sensorId = in.readString(this.sensorId instanceof Utf8 ? (Utf8)this.sensorId : null);
          break;

        case 2:
          this.timestamp = in.readLong();
          break;

        case 3:
          this.aqi = in.readDouble();
          break;

        case 4:
          this.co = in.readDouble();
          break;

        case 5:
          this.no = in.readDouble();
          break;

        case 6:
          this.no2 = in.readDouble();
          break;

        case 7:
          this.o3 = in.readDouble();
          break;

        case 8:
          this.so2 = in.readDouble();
          break;

        case 9:
          this.pm25 = in.readDouble();
          break;

        case 10:
          this.pm10 = in.readDouble();
          break;

        case 11:
          this.pm1 = in.readDouble();
          break;

        case 12:
          this.nh3 = in.readDouble();
          break;

        case 13:
          this.pressure = in.readDouble();
          break;

        case 14:
          this.humidity = in.readDouble();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}











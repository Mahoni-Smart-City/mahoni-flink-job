/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.mahoni.schema;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class TripSchema extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = 9223129613145090119L;
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TripSchema\",\"namespace\":\"com.mahoni.schema\",\"fields\":[{\"name\":\"eventId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"tripId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"userId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"scanInPlaceId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"scanInTimestamp\",\"type\":\"long\"},{\"name\":\"scanOutPlaceId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"scanOutTimestamp\",\"type\":[\"null\",\"long\"]},{\"name\":\"status\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"aqi\",\"type\":[\"null\",\"double\"]},{\"name\":\"point\",\"type\":[\"null\",\"int\"]}]}");
    public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

    private static SpecificData MODEL$ = new SpecificData();

    private static final BinaryMessageEncoder<TripSchema> ENCODER =
            new BinaryMessageEncoder<TripSchema>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<TripSchema> DECODER =
            new BinaryMessageDecoder<TripSchema>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<TripSchema> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<TripSchema> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<TripSchema> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<TripSchema>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Serializes this TripSchema to a ByteBuffer.
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /**
     * Deserializes a TripSchema from a ByteBuffer.
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a TripSchema instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static TripSchema fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    private java.lang.String eventId;
    private long timestamp;
    private java.lang.String tripId;
    private java.lang.String userId;
    private java.lang.String scanInPlaceId;
    private long scanInTimestamp;
    private java.lang.String scanOutPlaceId;
    private java.lang.Long scanOutTimestamp;
    private java.lang.String status;
    private java.lang.Double aqi;
    private java.lang.Integer point;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public TripSchema() {}

    /**
     * All-args constructor.
     * @param eventId The new value for eventId
     * @param timestamp The new value for timestamp
     * @param tripId The new value for tripId
     * @param userId The new value for userId
     * @param scanInPlaceId The new value for scanInPlaceId
     * @param scanInTimestamp The new value for scanInTimestamp
     * @param scanOutPlaceId The new value for scanOutPlaceId
     * @param scanOutTimestamp The new value for scanOutTimestamp
     * @param status The new value for status
     * @param aqi The new value for aqi
     * @param point The new value for point
     */
    public TripSchema(java.lang.String eventId, java.lang.Long timestamp, java.lang.String tripId, java.lang.String userId, java.lang.String scanInPlaceId, java.lang.Long scanInTimestamp, java.lang.String scanOutPlaceId, java.lang.Long scanOutTimestamp, java.lang.String status, java.lang.Double aqi, java.lang.Integer point) {
        this.eventId = eventId;
        this.timestamp = timestamp;
        this.tripId = tripId;
        this.userId = userId;
        this.scanInPlaceId = scanInPlaceId;
        this.scanInTimestamp = scanInTimestamp;
        this.scanOutPlaceId = scanOutPlaceId;
        this.scanOutTimestamp = scanOutTimestamp;
        this.status = status;
        this.aqi = aqi;
        this.point = point;
    }

    public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
    public org.apache.avro.Schema getSchema() { return SCHEMA$; }
    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0: return eventId;
            case 1: return timestamp;
            case 2: return tripId;
            case 3: return userId;
            case 4: return scanInPlaceId;
            case 5: return scanInTimestamp;
            case 6: return scanOutPlaceId;
            case 7: return scanOutTimestamp;
            case 8: return status;
            case 9: return aqi;
            case 10: return point;
            default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value="unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0: eventId = value$ != null ? value$.toString() : null; break;
            case 1: timestamp = (java.lang.Long)value$; break;
            case 2: tripId = value$ != null ? value$.toString() : null; break;
            case 3: userId = value$ != null ? value$.toString() : null; break;
            case 4: scanInPlaceId = value$ != null ? value$.toString() : null; break;
            case 5: scanInTimestamp = (java.lang.Long)value$; break;
            case 6: scanOutPlaceId = value$ != null ? value$.toString() : null; break;
            case 7: scanOutTimestamp = (java.lang.Long)value$; break;
            case 8: status = value$ != null ? value$.toString() : null; break;
            case 9: aqi = (java.lang.Double)value$; break;
            case 10: point = (java.lang.Integer)value$; break;
            default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    /**
     * Gets the value of the 'eventId' field.
     * @return The value of the 'eventId' field.
     */
    public java.lang.String getEventId() {
        return eventId;
    }


    /**
     * Sets the value of the 'eventId' field.
     * @param value the value to set.
     */
    public void setEventId(java.lang.String value) {
        this.eventId = value;
    }

    /**
     * Gets the value of the 'timestamp' field.
     * @return The value of the 'timestamp' field.
     */
    public long getTimestamp() {
        return timestamp;
    }


    /**
     * Sets the value of the 'timestamp' field.
     * @param value the value to set.
     */
    public void setTimestamp(long value) {
        this.timestamp = value;
    }

    /**
     * Gets the value of the 'tripId' field.
     * @return The value of the 'tripId' field.
     */
    public java.lang.String getTripId() {
        return tripId;
    }


    /**
     * Sets the value of the 'tripId' field.
     * @param value the value to set.
     */
    public void setTripId(java.lang.String value) {
        this.tripId = value;
    }

    /**
     * Gets the value of the 'userId' field.
     * @return The value of the 'userId' field.
     */
    public java.lang.String getUserId() {
        return userId;
    }


    /**
     * Sets the value of the 'userId' field.
     * @param value the value to set.
     */
    public void setUserId(java.lang.String value) {
        this.userId = value;
    }

    /**
     * Gets the value of the 'scanInPlaceId' field.
     * @return The value of the 'scanInPlaceId' field.
     */
    public java.lang.String getScanInPlaceId() {
        return scanInPlaceId;
    }


    /**
     * Sets the value of the 'scanInPlaceId' field.
     * @param value the value to set.
     */
    public void setScanInPlaceId(java.lang.String value) {
        this.scanInPlaceId = value;
    }

    /**
     * Gets the value of the 'scanInTimestamp' field.
     * @return The value of the 'scanInTimestamp' field.
     */
    public long getScanInTimestamp() {
        return scanInTimestamp;
    }


    /**
     * Sets the value of the 'scanInTimestamp' field.
     * @param value the value to set.
     */
    public void setScanInTimestamp(long value) {
        this.scanInTimestamp = value;
    }

    /**
     * Gets the value of the 'scanOutPlaceId' field.
     * @return The value of the 'scanOutPlaceId' field.
     */
    public java.lang.String getScanOutPlaceId() {
        return scanOutPlaceId;
    }


    /**
     * Sets the value of the 'scanOutPlaceId' field.
     * @param value the value to set.
     */
    public void setScanOutPlaceId(java.lang.String value) {
        this.scanOutPlaceId = value;
    }

    /**
     * Gets the value of the 'scanOutTimestamp' field.
     * @return The value of the 'scanOutTimestamp' field.
     */
    public java.lang.Long getScanOutTimestamp() {
        return scanOutTimestamp;
    }


    /**
     * Sets the value of the 'scanOutTimestamp' field.
     * @param value the value to set.
     */
    public void setScanOutTimestamp(java.lang.Long value) {
        this.scanOutTimestamp = value;
    }

    /**
     * Gets the value of the 'status' field.
     * @return The value of the 'status' field.
     */
    public java.lang.String getStatus() {
        return status;
    }


    /**
     * Sets the value of the 'status' field.
     * @param value the value to set.
     */
    public void setStatus(java.lang.String value) {
        this.status = value;
    }

    /**
     * Gets the value of the 'aqi' field.
     * @return The value of the 'aqi' field.
     */
    public java.lang.Double getAqi() {
        return aqi;
    }


    /**
     * Sets the value of the 'aqi' field.
     * @param value the value to set.
     */
    public void setAqi(java.lang.Double value) {
        this.aqi = value;
    }

    /**
     * Gets the value of the 'point' field.
     * @return The value of the 'point' field.
     */
    public java.lang.Integer getPoint() {
        return point;
    }


    /**
     * Sets the value of the 'point' field.
     * @param value the value to set.
     */
    public void setPoint(java.lang.Integer value) {
        this.point = value;
    }

    /**
     * Creates a new TripSchema RecordBuilder.
     * @return A new TripSchema RecordBuilder
     */
    public static com.mahoni.schema.TripSchema.Builder newBuilder() {
        return new com.mahoni.schema.TripSchema.Builder();
    }

    /**
     * Creates a new TripSchema RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new TripSchema RecordBuilder
     */
    public static com.mahoni.schema.TripSchema.Builder newBuilder(com.mahoni.schema.TripSchema.Builder other) {
        if (other == null) {
            return new com.mahoni.schema.TripSchema.Builder();
        } else {
            return new com.mahoni.schema.TripSchema.Builder(other);
        }
    }

    /**
     * Creates a new TripSchema RecordBuilder by copying an existing TripSchema instance.
     * @param other The existing instance to copy.
     * @return A new TripSchema RecordBuilder
     */
    public static com.mahoni.schema.TripSchema.Builder newBuilder(com.mahoni.schema.TripSchema other) {
        if (other == null) {
            return new com.mahoni.schema.TripSchema.Builder();
        } else {
            return new com.mahoni.schema.TripSchema.Builder(other);
        }
    }

    /**
     * RecordBuilder for TripSchema instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TripSchema>
            implements org.apache.avro.data.RecordBuilder<TripSchema> {

        private java.lang.String eventId;
        private long timestamp;
        private java.lang.String tripId;
        private java.lang.String userId;
        private java.lang.String scanInPlaceId;
        private long scanInTimestamp;
        private java.lang.String scanOutPlaceId;
        private java.lang.Long scanOutTimestamp;
        private java.lang.String status;
        private java.lang.Double aqi;
        private java.lang.Integer point;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(com.mahoni.schema.TripSchema.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.eventId)) {
                this.eventId = data().deepCopy(fields()[0].schema(), other.eventId);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.timestamp)) {
                this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
            if (isValidValue(fields()[2], other.tripId)) {
                this.tripId = data().deepCopy(fields()[2].schema(), other.tripId);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
            if (isValidValue(fields()[3], other.userId)) {
                this.userId = data().deepCopy(fields()[3].schema(), other.userId);
                fieldSetFlags()[3] = other.fieldSetFlags()[3];
            }
            if (isValidValue(fields()[4], other.scanInPlaceId)) {
                this.scanInPlaceId = data().deepCopy(fields()[4].schema(), other.scanInPlaceId);
                fieldSetFlags()[4] = other.fieldSetFlags()[4];
            }
            if (isValidValue(fields()[5], other.scanInTimestamp)) {
                this.scanInTimestamp = data().deepCopy(fields()[5].schema(), other.scanInTimestamp);
                fieldSetFlags()[5] = other.fieldSetFlags()[5];
            }
            if (isValidValue(fields()[6], other.scanOutPlaceId)) {
                this.scanOutPlaceId = data().deepCopy(fields()[6].schema(), other.scanOutPlaceId);
                fieldSetFlags()[6] = other.fieldSetFlags()[6];
            }
            if (isValidValue(fields()[7], other.scanOutTimestamp)) {
                this.scanOutTimestamp = data().deepCopy(fields()[7].schema(), other.scanOutTimestamp);
                fieldSetFlags()[7] = other.fieldSetFlags()[7];
            }
            if (isValidValue(fields()[8], other.status)) {
                this.status = data().deepCopy(fields()[8].schema(), other.status);
                fieldSetFlags()[8] = other.fieldSetFlags()[8];
            }
            if (isValidValue(fields()[9], other.aqi)) {
                this.aqi = data().deepCopy(fields()[9].schema(), other.aqi);
                fieldSetFlags()[9] = other.fieldSetFlags()[9];
            }
            if (isValidValue(fields()[10], other.point)) {
                this.point = data().deepCopy(fields()[10].schema(), other.point);
                fieldSetFlags()[10] = other.fieldSetFlags()[10];
            }
        }

        /**
         * Creates a Builder by copying an existing TripSchema instance
         * @param other The existing instance to copy.
         */
        private Builder(com.mahoni.schema.TripSchema other) {
            super(SCHEMA$);
            if (isValidValue(fields()[0], other.eventId)) {
                this.eventId = data().deepCopy(fields()[0].schema(), other.eventId);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.timestamp)) {
                this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.tripId)) {
                this.tripId = data().deepCopy(fields()[2].schema(), other.tripId);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.userId)) {
                this.userId = data().deepCopy(fields()[3].schema(), other.userId);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.scanInPlaceId)) {
                this.scanInPlaceId = data().deepCopy(fields()[4].schema(), other.scanInPlaceId);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.scanInTimestamp)) {
                this.scanInTimestamp = data().deepCopy(fields()[5].schema(), other.scanInTimestamp);
                fieldSetFlags()[5] = true;
            }
            if (isValidValue(fields()[6], other.scanOutPlaceId)) {
                this.scanOutPlaceId = data().deepCopy(fields()[6].schema(), other.scanOutPlaceId);
                fieldSetFlags()[6] = true;
            }
            if (isValidValue(fields()[7], other.scanOutTimestamp)) {
                this.scanOutTimestamp = data().deepCopy(fields()[7].schema(), other.scanOutTimestamp);
                fieldSetFlags()[7] = true;
            }
            if (isValidValue(fields()[8], other.status)) {
                this.status = data().deepCopy(fields()[8].schema(), other.status);
                fieldSetFlags()[8] = true;
            }
            if (isValidValue(fields()[9], other.aqi)) {
                this.aqi = data().deepCopy(fields()[9].schema(), other.aqi);
                fieldSetFlags()[9] = true;
            }
            if (isValidValue(fields()[10], other.point)) {
                this.point = data().deepCopy(fields()[10].schema(), other.point);
                fieldSetFlags()[10] = true;
            }
        }

        /**
         * Gets the value of the 'eventId' field.
         * @return The value.
         */
        public java.lang.String getEventId() {
            return eventId;
        }


        /**
         * Sets the value of the 'eventId' field.
         * @param value The value of 'eventId'.
         * @return This builder.
         */
        public com.mahoni.schema.TripSchema.Builder setEventId(java.lang.String value) {
            validate(fields()[0], value);
            this.eventId = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'eventId' field has been set.
         * @return True if the 'eventId' field has been set, false otherwise.
         */
        public boolean hasEventId() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'eventId' field.
         * @return This builder.
         */
        public com.mahoni.schema.TripSchema.Builder clearEventId() {
            eventId = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'timestamp' field.
         * @return The value.
         */
        public long getTimestamp() {
            return timestamp;
        }


        /**
         * Sets the value of the 'timestamp' field.
         * @param value The value of 'timestamp'.
         * @return This builder.
         */
        public com.mahoni.schema.TripSchema.Builder setTimestamp(long value) {
            validate(fields()[1], value);
            this.timestamp = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'timestamp' field has been set.
         * @return True if the 'timestamp' field has been set, false otherwise.
         */
        public boolean hasTimestamp() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'timestamp' field.
         * @return This builder.
         */
        public com.mahoni.schema.TripSchema.Builder clearTimestamp() {
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'tripId' field.
         * @return The value.
         */
        public java.lang.String getTripId() {
            return tripId;
        }


        /**
         * Sets the value of the 'tripId' field.
         * @param value The value of 'tripId'.
         * @return This builder.
         */
        public com.mahoni.schema.TripSchema.Builder setTripId(java.lang.String value) {
            validate(fields()[2], value);
            this.tripId = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'tripId' field has been set.
         * @return True if the 'tripId' field has been set, false otherwise.
         */
        public boolean hasTripId() {
            return fieldSetFlags()[2];
        }


        /**
         * Clears the value of the 'tripId' field.
         * @return This builder.
         */
        public com.mahoni.schema.TripSchema.Builder clearTripId() {
            tripId = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'userId' field.
         * @return The value.
         */
        public java.lang.String getUserId() {
            return userId;
        }


        /**
         * Sets the value of the 'userId' field.
         * @param value The value of 'userId'.
         * @return This builder.
         */
        public com.mahoni.schema.TripSchema.Builder setUserId(java.lang.String value) {
            validate(fields()[3], value);
            this.userId = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'userId' field has been set.
         * @return True if the 'userId' field has been set, false otherwise.
         */
        public boolean hasUserId() {
            return fieldSetFlags()[3];
        }


        /**
         * Clears the value of the 'userId' field.
         * @return This builder.
         */
        public com.mahoni.schema.TripSchema.Builder clearUserId() {
            userId = null;
            fieldSetFlags()[3] = false;
            return this;
        }

        /**
         * Gets the value of the 'scanInPlaceId' field.
         * @return The value.
         */
        public java.lang.String getScanInPlaceId() {
            return scanInPlaceId;
        }


        /**
         * Sets the value of the 'scanInPlaceId' field.
         * @param value The value of 'scanInPlaceId'.
         * @return This builder.
         */
        public com.mahoni.schema.TripSchema.Builder setScanInPlaceId(java.lang.String value) {
            validate(fields()[4], value);
            this.scanInPlaceId = value;
            fieldSetFlags()[4] = true;
            return this;
        }

        /**
         * Checks whether the 'scanInPlaceId' field has been set.
         * @return True if the 'scanInPlaceId' field has been set, false otherwise.
         */
        public boolean hasScanInPlaceId() {
            return fieldSetFlags()[4];
        }


        /**
         * Clears the value of the 'scanInPlaceId' field.
         * @return This builder.
         */
        public com.mahoni.schema.TripSchema.Builder clearScanInPlaceId() {
            scanInPlaceId = null;
            fieldSetFlags()[4] = false;
            return this;
        }

        /**
         * Gets the value of the 'scanInTimestamp' field.
         * @return The value.
         */
        public long getScanInTimestamp() {
            return scanInTimestamp;
        }


        /**
         * Sets the value of the 'scanInTimestamp' field.
         * @param value The value of 'scanInTimestamp'.
         * @return This builder.
         */
        public com.mahoni.schema.TripSchema.Builder setScanInTimestamp(long value) {
            validate(fields()[5], value);
            this.scanInTimestamp = value;
            fieldSetFlags()[5] = true;
            return this;
        }

        /**
         * Checks whether the 'scanInTimestamp' field has been set.
         * @return True if the 'scanInTimestamp' field has been set, false otherwise.
         */
        public boolean hasScanInTimestamp() {
            return fieldSetFlags()[5];
        }


        /**
         * Clears the value of the 'scanInTimestamp' field.
         * @return This builder.
         */
        public com.mahoni.schema.TripSchema.Builder clearScanInTimestamp() {
            fieldSetFlags()[5] = false;
            return this;
        }

        /**
         * Gets the value of the 'scanOutPlaceId' field.
         * @return The value.
         */
        public java.lang.String getScanOutPlaceId() {
            return scanOutPlaceId;
        }


        /**
         * Sets the value of the 'scanOutPlaceId' field.
         * @param value The value of 'scanOutPlaceId'.
         * @return This builder.
         */
        public com.mahoni.schema.TripSchema.Builder setScanOutPlaceId(java.lang.String value) {
            validate(fields()[6], value);
            this.scanOutPlaceId = value;
            fieldSetFlags()[6] = true;
            return this;
        }

        /**
         * Checks whether the 'scanOutPlaceId' field has been set.
         * @return True if the 'scanOutPlaceId' field has been set, false otherwise.
         */
        public boolean hasScanOutPlaceId() {
            return fieldSetFlags()[6];
        }


        /**
         * Clears the value of the 'scanOutPlaceId' field.
         * @return This builder.
         */
        public com.mahoni.schema.TripSchema.Builder clearScanOutPlaceId() {
            scanOutPlaceId = null;
            fieldSetFlags()[6] = false;
            return this;
        }

        /**
         * Gets the value of the 'scanOutTimestamp' field.
         * @return The value.
         */
        public java.lang.Long getScanOutTimestamp() {
            return scanOutTimestamp;
        }


        /**
         * Sets the value of the 'scanOutTimestamp' field.
         * @param value The value of 'scanOutTimestamp'.
         * @return This builder.
         */
        public com.mahoni.schema.TripSchema.Builder setScanOutTimestamp(java.lang.Long value) {
            validate(fields()[7], value);
            this.scanOutTimestamp = value;
            fieldSetFlags()[7] = true;
            return this;
        }

        /**
         * Checks whether the 'scanOutTimestamp' field has been set.
         * @return True if the 'scanOutTimestamp' field has been set, false otherwise.
         */
        public boolean hasScanOutTimestamp() {
            return fieldSetFlags()[7];
        }


        /**
         * Clears the value of the 'scanOutTimestamp' field.
         * @return This builder.
         */
        public com.mahoni.schema.TripSchema.Builder clearScanOutTimestamp() {
            scanOutTimestamp = null;
            fieldSetFlags()[7] = false;
            return this;
        }

        /**
         * Gets the value of the 'status' field.
         * @return The value.
         */
        public java.lang.String getStatus() {
            return status;
        }


        /**
         * Sets the value of the 'status' field.
         * @param value The value of 'status'.
         * @return This builder.
         */
        public com.mahoni.schema.TripSchema.Builder setStatus(java.lang.String value) {
            validate(fields()[8], value);
            this.status = value;
            fieldSetFlags()[8] = true;
            return this;
        }

        /**
         * Checks whether the 'status' field has been set.
         * @return True if the 'status' field has been set, false otherwise.
         */
        public boolean hasStatus() {
            return fieldSetFlags()[8];
        }


        /**
         * Clears the value of the 'status' field.
         * @return This builder.
         */
        public com.mahoni.schema.TripSchema.Builder clearStatus() {
            status = null;
            fieldSetFlags()[8] = false;
            return this;
        }

        /**
         * Gets the value of the 'aqi' field.
         * @return The value.
         */
        public java.lang.Double getAqi() {
            return aqi;
        }


        /**
         * Sets the value of the 'aqi' field.
         * @param value The value of 'aqi'.
         * @return This builder.
         */
        public com.mahoni.schema.TripSchema.Builder setAqi(java.lang.Double value) {
            validate(fields()[9], value);
            this.aqi = value;
            fieldSetFlags()[9] = true;
            return this;
        }

        /**
         * Checks whether the 'aqi' field has been set.
         * @return True if the 'aqi' field has been set, false otherwise.
         */
        public boolean hasAqi() {
            return fieldSetFlags()[9];
        }


        /**
         * Clears the value of the 'aqi' field.
         * @return This builder.
         */
        public com.mahoni.schema.TripSchema.Builder clearAqi() {
            aqi = null;
            fieldSetFlags()[9] = false;
            return this;
        }

        /**
         * Gets the value of the 'point' field.
         * @return The value.
         */
        public java.lang.Integer getPoint() {
            return point;
        }


        /**
         * Sets the value of the 'point' field.
         * @param value The value of 'point'.
         * @return This builder.
         */
        public com.mahoni.schema.TripSchema.Builder setPoint(java.lang.Integer value) {
            validate(fields()[10], value);
            this.point = value;
            fieldSetFlags()[10] = true;
            return this;
        }

        /**
         * Checks whether the 'point' field has been set.
         * @return True if the 'point' field has been set, false otherwise.
         */
        public boolean hasPoint() {
            return fieldSetFlags()[10];
        }


        /**
         * Clears the value of the 'point' field.
         * @return This builder.
         */
        public com.mahoni.schema.TripSchema.Builder clearPoint() {
            point = null;
            fieldSetFlags()[10] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public TripSchema build() {
            try {
                TripSchema record = new TripSchema();
                record.eventId = fieldSetFlags()[0] ? this.eventId : (java.lang.String) defaultValue(fields()[0]);
                record.timestamp = fieldSetFlags()[1] ? this.timestamp : (java.lang.Long) defaultValue(fields()[1]);
                record.tripId = fieldSetFlags()[2] ? this.tripId : (java.lang.String) defaultValue(fields()[2]);
                record.userId = fieldSetFlags()[3] ? this.userId : (java.lang.String) defaultValue(fields()[3]);
                record.scanInPlaceId = fieldSetFlags()[4] ? this.scanInPlaceId : (java.lang.String) defaultValue(fields()[4]);
                record.scanInTimestamp = fieldSetFlags()[5] ? this.scanInTimestamp : (java.lang.Long) defaultValue(fields()[5]);
                record.scanOutPlaceId = fieldSetFlags()[6] ? this.scanOutPlaceId : (java.lang.String) defaultValue(fields()[6]);
                record.scanOutTimestamp = fieldSetFlags()[7] ? this.scanOutTimestamp : (java.lang.Long) defaultValue(fields()[7]);
                record.status = fieldSetFlags()[8] ? this.status : (java.lang.String) defaultValue(fields()[8]);
                record.aqi = fieldSetFlags()[9] ? this.aqi : (java.lang.Double) defaultValue(fields()[9]);
                record.point = fieldSetFlags()[10] ? this.point : (java.lang.Integer) defaultValue(fields()[10]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<TripSchema>
            WRITER$ = (org.apache.avro.io.DatumWriter<TripSchema>)MODEL$.createDatumWriter(SCHEMA$);

    @Override public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<TripSchema>
            READER$ = (org.apache.avro.io.DatumReader<TripSchema>)MODEL$.createDatumReader(SCHEMA$);

    @Override public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

    @Override protected boolean hasCustomCoders() { return true; }

    @Override public void customEncode(org.apache.avro.io.Encoder out)
            throws java.io.IOException
    {
        out.writeString(this.eventId);

        out.writeLong(this.timestamp);

        out.writeString(this.tripId);

        out.writeString(this.userId);

        out.writeString(this.scanInPlaceId);

        out.writeLong(this.scanInTimestamp);

        if (this.scanOutPlaceId == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeString(this.scanOutPlaceId);
        }

        if (this.scanOutTimestamp == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeLong(this.scanOutTimestamp);
        }

        out.writeString(this.status);

        if (this.aqi == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeDouble(this.aqi);
        }

        if (this.point == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeInt(this.point);
        }

    }

    @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
            throws java.io.IOException
    {
        org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
        if (fieldOrder == null) {
            this.eventId = in.readString();

            this.timestamp = in.readLong();

            this.tripId = in.readString();

            this.userId = in.readString();

            this.scanInPlaceId = in.readString();

            this.scanInTimestamp = in.readLong();

            if (in.readIndex() != 1) {
                in.readNull();
                this.scanOutPlaceId = null;
            } else {
                this.scanOutPlaceId = in.readString();
            }

            if (in.readIndex() != 1) {
                in.readNull();
                this.scanOutTimestamp = null;
            } else {
                this.scanOutTimestamp = in.readLong();
            }

            this.status = in.readString();

            if (in.readIndex() != 1) {
                in.readNull();
                this.aqi = null;
            } else {
                this.aqi = in.readDouble();
            }

            if (in.readIndex() != 1) {
                in.readNull();
                this.point = null;
            } else {
                this.point = in.readInt();
            }

        } else {
            for (int i = 0; i < 11; i++) {
                switch (fieldOrder[i].pos()) {
                    case 0:
                        this.eventId = in.readString();
                        break;

                    case 1:
                        this.timestamp = in.readLong();
                        break;

                    case 2:
                        this.tripId = in.readString();
                        break;

                    case 3:
                        this.userId = in.readString();
                        break;

                    case 4:
                        this.scanInPlaceId = in.readString();
                        break;

                    case 5:
                        this.scanInTimestamp = in.readLong();
                        break;

                    case 6:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.scanOutPlaceId = null;
                        } else {
                            this.scanOutPlaceId = in.readString();
                        }
                        break;

                    case 7:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.scanOutTimestamp = null;
                        } else {
                            this.scanOutTimestamp = in.readLong();
                        }
                        break;

                    case 8:
                        this.status = in.readString();
                        break;

                    case 9:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.aqi = null;
                        } else {
                            this.aqi = in.readDouble();
                        }
                        break;

                    case 10:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.point = null;
                        } else {
                            this.point = in.readInt();
                        }
                        break;

                    default:
                        throw new java.io.IOException("Corrupt ResolvingDecoder.");
                }
            }
        }
    }
}
